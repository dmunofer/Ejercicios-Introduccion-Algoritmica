tipo CUENTA estructura
    saldo : REAL
    descubierto : REAL

    invariante
        # El descubierto no está autorizado
        descubierto = 0

        # el saldo debe ser superior al descubierto autorizado
        saldo ≥ descubierto
fin CUENTA

Algoritmo: Definición de abrir una cuenta

abrir(c : CUENTA ; saldo_inicial : REAL)
    # Inicializar `c' mediante un `saldo_inicial'.

Precondición
    saldo_inicial > 0

realización
    c.descubierto ← 0
    c.saldo ← saldo_inicial

postcondición
    c.descubierto = 0
        # El descubierto no está autorizado
    antiguo(saldo_inicial) = saldo_inicial
    c.saldo = saldo_inicial

fin abrir

Algoritmo 2: abonar una cuenta
 
abonar(c : CUENTA ; crédito : REAL)
    # Crédito `c' de la suma `crédito'.

Precondición
    c.saldo ≠ NULO
    crédito ≠ NULO

realización
    c.saldo ← c.saldo + crédito

postcondición
    # El descubierto autorizado y el importe del `crédito' no se
    # modifican
    antiguo(c).descubierto = descubierto
    antiguo(c).crédito = crédito

    # El saldo aumenta con el `crédito'
    c.saldo = antiguo(c).saldo + crédito

fin abonar


Algoritmo: cargar una cuenta
 
cargar(c : CUENTA ; débito : REAL)
    # Carga `c' con la suma `débito'.

Precondición
    c.saldo ≠ NULO
    débito ≠ NULO
    c.saldo + c.descubierto ≥ débito ≥ 0

realización
    abonar(c, –débito)

postcondición
    # El descubierto autorizado y el importe del `débito' no se
    # modifican
    antiguo(c).descubierto = descubierto
    antiguo(débito) = débito

    # Al saldo se le resta el `débito'
    c.saldo = antiguo(c).saldo – débito

fin cargar


Algoritmo: función consultar una cuenta

consultar(c : CUENTA) : REAL
    # El `saldo' de la cuenta `c'.

precondición
    c.saldo ≠ NULO

realización
    Resultado ← c.saldo

postcondición
    Resultado = c.saldo

fin consultar

Algoritmo: Definición de es_acreedora

es_acreedora(c : CUENTA) : BOOLEANO
    # ¿`c' es acreedora?

precondición
    c.saldo ≠ NULO

Realización
    Resultado ← (c.saldo > 0)

postcondición
    Resultado = (c.saldo > 0)

fin es_acreedora

Algoritmo 5: Definición de es_deudora

es_deudora (c : CUENTA) : BOOLEANO
    # ¿`c' es deudora?

precondición
    c.saldo ≠ NULO

Realización
    Resultado ← (– c.descubierto ≤ c.saldo ≤ 0)

postcondición
    Resultado = (– c.descubierto ≤ c.saldo ≤ 0)

fin es_deudora

AHORA CON DESCUBIERTO AUTORIZADO

tipo CUENTA estructura
    saldo : REAL
    descubierto : REAL

    invariante
        # El descubierto está autorizado
        descubierto ≥ 0

        # el saldo debe ser superior al descubierto autorizado
        saldo ≥ – descubierto
fin CUENTA


Algoritmo: Definición de abrir una cuenta con descubierto autorizado

abrir(c : CUENTA ; saldo_inicial : REAL ; descubierto_MAX : REAL)
    # Inicializar `c' mediante un `saldo_inicial' y un
    # `descubierto_MAX'.

Precondición
    saldo_inicial > 0
    descubierto_MAX ≥ 0

realización
    c.descubierto ← descubierto_MAX
    c.saldo ← saldo_inicial

postcondición
    c.descubierto = descubierto_MAX
    c.saldo = saldo_inicial

fin abrir

Algoritmo 7: Definición de abrir una cuenta con descubierto autorizado durante un tiempo limitado

Algoritmo abrir
    # Inicializar `c' mediante un `saldo_inicial' y un 
    # `descubierto_MAX' durante una `duración_max'.

Entrada
    c : CUENTA
    saldo_inicial : REAL
    descubierto_MAX : REAL
    duración_max : FECHA

Precondición
    saldo_inicial > 0
    descubierto_MAX ≥ 0
    duración_max ≥ 0

realización
    c.descubierto ← descubierto_MAX
    c.saldo ← saldo_inicial
    c.fecha_descubierto ← 0
    c.duración_max ← duración_max

postcondición
    c.descubierto = descubierto_MAX
    c.saldo = saldo_inicial
    c.duración_max = duración_max
    c.fecha_descubierto = 0

fin abrir


